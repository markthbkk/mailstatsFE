{"version":3,"sources":["components/MailStats/DiskStats.module.css","components/MailStats/SpamStats.module.css","components/MailStats/Home.module.css","components/MailStats/SpamChart.module.css","components/MailStats/SpamChart.js","components/MailStats/QueueStats.js","components/MailStats/ServiceStats.js","components/MailStats/Volumes.js","components/MailStats/DiskStats.js","components/MailStats/SpamStats.js","components/MailStats/HomeAccordion.js","components/MailStats/Home.js","components/MailStats/Menu.js","App.js","index.js","components/MailStats/QueueStats.module.css","components/MailStats/ServiceStats.module.css"],"names":["module","exports","chartArrayTopSenders","QueueStats","useState","queueStats","setQueueStats","loading","setLoading","readQueueStatsDB","console","log","axios","get","certDataJSON","data","STATS_SORTED_ASC","sort","objA","objB","Number","Date","documentID","status","useEffect","timer","setInterval","clearInterval","loadSpinner","GridLoader","color","size","itemsToRender","filter","el","serverName","className","styles","pagelabel","spinnerQueue","map","item","listItemWrapperQueue","listItemWrapperInnerQueue","listItemQueue1","serverlabelQueue","listItemQueue2","queueLabel","label","queueName","messageCount","ServiceStats","serviceStats","setServiceStats","readServiceStatsDB","pagelabelsvc","spinnerSVC","listItemWrapperSVC","listItemWrapperInner","listItemSVC","serverlabelsvc","serviceDetails","servicelabel","serviceName","Volumes","props","diskData","volumes","vol","volumeCapacity","volumeFreeSpace","capacityGB","freeSpaceGB","Math","floor","toString","concat","bgColor","percentFree","perCentFreeString","style","backgroundColor","width","DiskStats","diskStats","setDiskStats","readDiskStatsDB","localeCompare","pagelabelDisk","WrapperDisk","outputExcludeArray","SpamChart","topSenders","setTopSenders","displayChart","setDisplayChart","xAxisMax","setXAxisMax","domain","year","date","start","getFullYear","month","getMonth","getDate","String","padStart","selectedDate","readSpamStatsDB","spamDataJSON","chartArray","CHART_ARRAY_SORTED_ASC","chartArrayTop25","_","index","includes","sender","length","outputToChart","BarChart","layout","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","type","dataKey","YAxis","Tooltip","Legend","Bar","fill","SpamStats","setDate","end","setSelectedDate","datesWithSenderData","setDatesWithSenderData","disabledDates","setDisabledDates","distinctDates","distinctDatesJSON","disabledDatesArray","fullMonth","monthYearString","allDatesThisMonth","document","getElementsByClassName","Array","from","forEach","fullDate","innerText","dateMonthYearString","classList","toggle","dateMonthYearStringWithOffset","push","formatDatesWithData","handleMonthChange","useCallback","pagelabelSpam","datePicker","AppProvider","i18n","enTranslations","Page","DatePicker","onChange","onMonthChange","selected","disableDatesBefore","disableDatesAfter","disableSpecificDates","WrapperSpam","HomeAccordion","healthItems","Object","keys","queuesHealth","servicesHealth","diskHealth","Item","title","Home","initialHealthObject","serversArray","serverHealth","setServerHealth","readMailStatsDB","certDataJSONDisk","DISK_STATS_SORTED_ASC","DBObjectServers","newObj","find","certDataJSONServices","SERVICE_STATS_SORTED_ASC","DBObjectServices","servicesServerArray","certDataJSONQueues","QUEUE_STATS_SORTED_ASC","DBObjectQueues","queuesServerArray","home","WrapperAccordion","BurgerMenu","isOpen","setIsOpen","onClose","Trigger","variant","icon","onClick","List","to","component","Menu","as","Divider","App","exact","path","element","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.0a593f55.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DiskStats\":\"DiskStats_DiskStats__2P_eA\",\"pagelabelDisk\":\"DiskStats_pagelabelDisk__2Acqz\",\"spinnerQueue\":\"DiskStats_spinnerQueue__3b0xR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagelabelSpam\":\"SpamStats_pagelabelSpam__MwEh8\",\"datePicker\":\"SpamStats_datePicker__22t21\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1eVLq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinnerSVC\":\"SpamChart_spinnerSVC__3UnUP\"};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport axios from \"axios\";\r\nimport styles from \"./SpamChart.module.css\"\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { GridLoader } from \"react-spinners\";\r\n\r\nconst outputExcludeArray = [\r\n  \"MicrosoftExchange329e71ec88ae4615bbc36ab6ce41109e@mahidol.ac.th\",\r\n];\r\n\r\nlet chartArrayTopSenders;\r\n\r\nconst SpamChart = (props) => {\r\n  const [topSenders, setTopSenders] = useState([]);\r\n  const [displayChart, setDisplayChart] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n    const [xAxisMax, setXAxisMax] = useState(25000)\r\n    const domain = [0,25000]\r\n\r\n  const year = props.date.start.getFullYear();\r\n  let month = props.date.start.getMonth() + 1;\r\n  let date = props.date.start.getDate();\r\n\r\n  month = String(month).padStart(2, 0);\r\n\r\n  date = String(date).padStart(2, 0);\r\n\r\n  const selectedDate = `${year}-${month}-${date}`;\r\n\r\n  //   console.log(selectedDate);\r\n\r\n  const readSpamStatsDB = async function (selectedDate) {\r\n    let spamDataJSON;\r\n    setDisplayChart(false);\r\n    setLoading(true);\r\n\r\n    // console.log(selectedDate);\r\n\r\n    if (selectedDate !== \"1999-0-1\") {\r\n      spamDataJSON = await axios.get(\r\n        `https://mailstats-api.onrender.com/api/v1/spamStats/?date=${selectedDate}`\r\n      );\r\n\r\n      if (spamDataJSON.status === 200) {\r\n        // console.log(\"Query Complete\");\r\n        setLoading(false);\r\n        // console.log(spamDataJSON.data);\r\n      }\r\n    }\r\n\r\n    return spamDataJSON.data;\r\n  };\r\n\r\n    async function outputToChart(selectedDate) {\r\n        // console.log('START')\r\n        const chartArray = await readSpamStatsDB(selectedDate);\r\n\r\n        // console.log(chartArray);\r\n\r\n        const CHART_ARRAY_SORTED_ASC = chartArray.sort(\r\n            (objA, objB) => Number(objB.messageCount) - Number(objA.messageCount)\r\n        );\r\n\r\n        let chartArrayTop25 = CHART_ARRAY_SORTED_ASC.filter(\r\n            (_, index) => index < 25\r\n        );\r\n        chartArrayTopSenders = chartArrayTop25.filter((el) => {\r\n            return !outputExcludeArray.includes(el.sender);\r\n        });\r\n      \r\n        if (chartArrayTopSenders.length > 0) { \r\n      \r\n        console.log(chartArrayTopSenders[0].messageCount)\r\n\r\n        setXAxisMax(chartArrayTopSenders[0].messageCount);\r\n\r\n    }\r\n\r\n    \r\n    setTopSenders(chartArrayTopSenders);\r\n    if (chartArrayTopSenders.length) {\r\n      setDisplayChart(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    outputToChart(selectedDate);\r\n  }, [selectedDate]);\r\n\r\n  const loadSpinner = (\r\n    <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />\r\n    );\r\n    \r\n    \r\n    domain[1] = Number(xAxisMax);\r\n\r\n    \r\n\r\n  if (loading) {\r\n    return <div className={styles.spinnerSVC}>{loadSpinner}</div>;\r\n  } else if (displayChart) {\r\n    return (\r\n      <div>\r\n        <BarChart\r\n          layout=\"vertical\"\r\n          width={1000}\r\n          height={800}\r\n          data={topSenders}\r\n          margin={{\r\n            top: 60,\r\n            right: 180,\r\n            left: 180,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis type=\"number\" dataKey=\"messageCount\" domain={domain} />\r\n          <YAxis type=\"category\" dataKey=\"sender\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Bar dataKey=\"messageCount\" fill=\"#3397a5\" />\r\n        </BarChart>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SpamChart;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport styles from \"./QueueStats.module.css\";\nimport {GridLoader} from \"react-spinners\"\n\nconst QueueStats = () => {\n  const [queueStats, setQueueStats] = useState([]);\n  const [loading, setLoading] = useState(false)\n\n  const readQueueStatsDB = async function () {\n    setLoading(true)\n\n    console.log('trigger Axios')\n\n    const certDataJSON = await axios.get(\n      `https://mailstats-api.onrender.com/api/v1/queueStats`\n    );\n\n    console.log(certDataJSON.data);\n\n    const STATS_SORTED_ASC = certDataJSON.data.sort(\n      (objA, objB) =>\n        Number(new Date(objA.documentID)) - Number(new Date(objB.documentID))\n    );\n\n    // console.log(certDataJSON.status);\n\n    if (certDataJSON.status === 200) {\n      setQueueStats(STATS_SORTED_ASC);\n      setLoading(false)\n    }\n  };\n useEffect(() => {\n   readQueueStatsDB()\n }, []);\n    // readQueueStatsDB();\n\n  useEffect(() => {\n    const timer = setInterval(() => readQueueStatsDB(), 30000);\n\n   \n    return () => clearInterval(timer);\n  }, []);\n\n\n  const loadSpinner = <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />;\n \n\n  \n\n  const itemsToRender = queueStats.filter((el) => el.serverName !== \"NoData\");\n\n  console.log(itemsToRender)\n\n  return (\n    <div className={styles.QueueStats}>\n      <div className={styles.pagelabel}>\n        <p>SMTP Queue Stats</p>\n      </div>\n      <div className={styles.spinnerQueue}>{loadSpinner}</div>\n\n      {itemsToRender.map((item) => (\n        <div className={styles.listItemWrapperQueue}>\n          <div className={styles.listItemWrapperInnerQueue}>\n            <ul>\n              <li className={styles.listItemQueue1}>\n                <div className={styles.serverlabelQueue}>\n                  <p>{item.serverName}</p>\n                </div>\n              </li>\n              <li className={styles.listItemQueue2}>\n                <div className={styles.queueLabel}>\n                  <p className={styles.label}>Queue:</p> {item.queueName}\n                </div>\n                <div className={styles.messageCount}>{item.messageCount}</div>\n              </li>\n            </ul>\n          </div>\n\n          \n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default QueueStats;\n","\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport styles from \"./ServiceStats.module.css\";\nimport { GridLoader } from \"react-spinners\";\n\nconst ServiceStats = () => {\n  const [serviceStats, setServiceStats] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const readServiceStatsDB = async function () {\n\n    setLoading(true);\n\n    console.log('trigger Axios')\n\n    const certDataJSON = await axios.get(\n      `https://mailstats-api.onrender.com/api/v1/serviceStats`\n    );\n\n    console.log(certDataJSON.data);\n\n    const STATS_SORTED_ASC = certDataJSON.data.sort(\n      (objA, objB) =>\n        Number(new Date(objA.documentID)) - Number(new Date(objB.documentID))\n    );\n\n    // console.log(certDataJSON.status);\n\n    if (certDataJSON.status === 200) {\n      setServiceStats(STATS_SORTED_ASC);\n       setLoading(false);\n    }\n  };\n useEffect(() => {\n   readServiceStatsDB()\n }, []);\n    // readQueueStatsDB();\n\n  useEffect(() => {\n    const timer = setInterval(() => readServiceStatsDB(), 30000);\n\n   \n    return () => clearInterval(timer);\n  }, []);\n\n  const loadSpinner = (\n    <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />\n  );\n\n  const itemsToRender = serviceStats.filter((el) => el.serverName !== \"NoData\");\n\n  console.log(itemsToRender)\n\n  return (\n    <div className={styles.ServiceStats}>\n      <div className={styles.pagelabelsvc}>\n        <p>SMTP Service Stats</p>\n      </div>\n      <div className={styles.spinnerSVC}>{loadSpinner}</div>\n      {itemsToRender.map((item) => (\n        <div className={styles.listItemWrapperSVC}>\n          <div className={styles.listItemWrapperInner}>\n            <ul>\n              <li className={styles.listItemSVC}>\n                <div className={styles.serverlabelsvc}>\n                  <p>{item.serverName}</p>\n                </div>\n              </li>\n              <li className={styles.listItemSVC}>\n                <div className={styles.serviceDetails}>\n                  <p className={styles.servicelabel}>Service:</p>\n                  <p>{item.serviceName}</p>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ServiceStats;\n","import \"./Volumes.css\";\r\n\r\nconst Volumes = (props) => {\r\n\r\n  console.log(props.data)\r\n\r\n  const diskData = props.data;\r\n  return (<div>\r\n    {diskData.map((el) => {\r\n      return (\r\n        \r\n        \r\n            <div>\r\n              <div className=\"serverlabelDisk\">\r\n                <p>{el.serverName}</p>\r\n              </div>\r\n              <div className=\"displayFrame\">\r\n                <div className=\"header\">Drive</div>\r\n                <div className=\"header\">Total Space</div>\r\n                <div className=\"header\">Free Space</div>\r\n                <div className=\"headerBar\"></div>\r\n                <div className=\"header\">% Free</div>\r\n              </div>\r\n\r\n          {el.volumes.map((vol) => {\r\n\r\n            console.log(vol.capacityGB, vol.freeSpaceGB);\r\n\r\n           \r\n           let volumeCapacity\r\n                \r\n                vol.capacityGB >= 1024\r\n                  ? (volumeCapacity = Math.floor(vol.capacityGB / 1024)\r\n                      .toString()\r\n                      .concat(\" TB\"))\r\n                  : (volumeCapacity = Math.floor(vol.capacityGB)\r\n                      .toString()\r\n                      .concat(\" GB\"));\r\n          \r\n\r\n            let volumeFreeSpace\r\n\r\n                vol.freeSpaceGB >= 1024\r\n             ? (volumeFreeSpace = (Math.floor((vol.freeSpaceGB/1024)))\r\n                 .toString()\r\n                 .concat(\" TB\"))\r\n             : (volumeFreeSpace = Math.floor(vol.freeSpaceGB)\r\n                 .toString()\r\n                .concat(\" GB\"));\r\n            \r\n            const percentFree = Math.floor((vol.freeSpaceGB / vol.capacityGB) * 100);\r\n\r\n            const perCentFreeString = (percentFree).toString().concat(\"%\")\r\n\r\n            let bgColor\r\n\r\n            (percentFree < 15) ? (percentFree < 8 ? bgColor = \"IndianRed\" : bgColor = \"Gold\") : bgColor = \"YellowGreen\"\r\n\r\n            console.log(perCentFreeString)\r\n\r\n            const style = {\r\n              backgroundColor: bgColor ,\r\n              width: perCentFreeString,\r\n            };\r\n              \r\n              return (\r\n                <div className=\"volumesMainGrid\">\r\n                  <div className=\"driveLabelDisk\">{vol.label}</div>\r\n                  <div className=\"totalSizeDisk\">{volumeCapacity}</div>\r\n                  <div className=\"freeSpaceDisk\">{volumeFreeSpace}</div>\r\n                  <div className=\"freeSpaceChartBarDisk\">\r\n                    <div\r\n                      className=\"diskBar\"\r\n                      style={\r\n                        style\r\n                      }\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"freeSpacePerCentDisk\">{percentFree}%</div>\r\n                </div>\r\n              );\r\n                       } )}\r\n            </div>\r\n        // );\r\n      \r\n      \r\n      \r\n      \r\n      )\r\n    })}\r\n\r\n     </div>)\r\n    }\r\n  \r\n\r\n          \r\n     \r\n//     });\r\n \r\n// };\r\n\r\nexport default Volumes\r\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport styles from \"./DiskStats.module.css\";\nimport { GridLoader } from \"react-spinners\"\nimport Volumes from './Volumes'\n\nconst DiskStats = () => {\n  const [diskStats, setDiskStats] = useState([]);\n  const [loading, setLoading] = useState(false)\n\n  const readDiskStatsDB = async function () {\n    setLoading(true)\n\n    console.log('trigger Axios')\n\n    const certDataJSON = await axios.get(\n      `https://mailstats-api.onrender.com/api/v1/diskStats`\n    );\n\n    // console.log(certDataJSON.data);\n\n    const STATS_SORTED_ASC = certDataJSON.data.sort(\n      (objA, objB) => {return objA.serverName.localeCompare(objB.serverName); }\n        \n    );\n\n    // console.log(certDataJSON.status);\n\n    if (certDataJSON.status === 200) {\n      setDiskStats(STATS_SORTED_ASC);\n      setLoading(false)\n    }\n  };\n  useEffect(() => {\n    readDiskStatsDB()\n  }, []);\n  \n\n  useEffect(() => {\n    const timer = setInterval(() => readDiskStatsDB(), 300000);\n\n   \n    return () => clearInterval(timer);\n  }, []);\n\n\n  const loadSpinner = <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />;\n \n\n  \n\n  const itemsToRender = diskStats.filter((el) => el.serverName !== \"NoData\");\n\n  console.log(itemsToRender)\n\n  return (\n    <div className={styles.DiskStats}>\n      <div className={styles.pagelabelDisk}>\n        <p>Exchange Disk Stats</p>\n      </div>\n      <div className={styles.spinnerSVC}>{loadSpinner}</div>\n\n      <div className={styles.WrapperDisk}>\n        <Volumes data={itemsToRender} />\n      </div>\n    </div>\n  );\n};\n\nexport default DiskStats;\n","/* eslint-disable array-callback-return */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useCallback, useEffect } from \"react\";\r\nimport styles from \"./SpamStats.module.css\";\r\nimport * as React from \"react\";\r\nimport enTranslations from \"@shopify/polaris/locales/en.json\";\r\nimport { AppProvider, Page, DatePicker } from \"@shopify/polaris\";\r\nimport SpamChart from \"./SpamChart\";\r\nimport axios from \"axios\";\r\n\r\n// const disabledDates = [];\r\n\r\n// disabledDates.push(new Date(\"2022-11-09T00:00:00\"));\r\n\r\nconst SpamStats = () => {\r\n  const [{ month, year }, setDate] = useState({ month: 10, year: 2022 });\r\n\r\n  const [selectedDate, setSelectedDate] = useState({\r\n    start: new Date(\"1999-1-1\"),\r\n    end: new Date(\"1999-1-1\"),\r\n  });\r\n  const [datesWithSenderData, setDatesWithSenderData] = useState([]);\r\n  const [disabledDates, setDisabledDates] = useState([]);\r\n\r\n  const distinctDates = async function () {\r\n    let distinctDatesJSON;\r\n\r\n    distinctDatesJSON = await axios.get(\r\n      `https://mailstats-api.onrender.com/api/v1/spamStatsDates`\r\n    );\r\n\r\n    if (distinctDatesJSON.status === 200) {\r\n      //   console.log(\"Distinct Dates Retrieved\");\r\n      //   console.log(distinctDatesJSON.data);\r\n    }\r\n\r\n    setDatesWithSenderData(distinctDatesJSON.data);\r\n\r\n    console.log(distinctDatesJSON.data[0]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    distinctDates();\r\n  }, []);\r\n\r\n  const disabledDatesArray = [];\r\n\r\n  const formatDatesWithData = function (month, year) {\r\n    // console.log(month, year)\r\n\r\n    const fullMonth = String(month + 1).padStart(2, 0);\r\n\r\n    const monthYearString = `${year}-${fullMonth}`;\r\n\r\n    const allDatesThisMonth = document.getElementsByClassName(\r\n      \"Polaris-DatePicker__Day\"\r\n    );\r\n\r\n    const allDatesThisMonthArray = Array.from(allDatesThisMonth);\r\n\r\n    // console.log(monthYearString)\r\n\r\n    allDatesThisMonthArray.forEach((el) => {\r\n      const fullDate = String(el.innerText).padStart(2, 0);\r\n\r\n      const dateMonthYearString = `${monthYearString}-${fullDate}`;\r\n\r\n      // console.log(dateMonthYearString)\r\n\r\n      if (datesWithSenderData.includes(dateMonthYearString)) {\r\n        // console.log(el.classList)\r\n\r\n        el.classList.toggle(\"Polaris-DatePicker__Day__withData\");\r\n\r\n        // console.log(dateMonthYearString);\r\n\r\n        //  console.log(el.classList);\r\n      }\r\n\r\n      if (!datesWithSenderData.includes(dateMonthYearString)) {\r\n        let dateMonthYearStringWithOffset =\r\n          dateMonthYearString.concat(\"T00:00:00\");\r\n\r\n        disabledDatesArray.push(new Date(dateMonthYearStringWithOffset));\r\n      }\r\n    });\r\n\r\n    // console.log(disabledDatesArray)\r\n\r\n    setDisabledDates(disabledDatesArray);\r\n  };\r\n\r\n  useEffect(() => {\r\n    formatDatesWithData(month, year);\r\n  }, [month, year, datesWithSenderData]);\r\n\r\n  const handleMonthChange = useCallback(\r\n    (month, year) => setDate({ month, year }),\r\n    []\r\n  );\r\n\r\n  // console.log(datesWithSenderData);\r\n\r\n  return (\r\n    <div className={styles.SpamStats}>\r\n      <div className={styles.pagelabelSpam}>\r\n        <p>Top Senders</p>\r\n      </div>\r\n      <div className={styles.datePicker}>\r\n        <AppProvider i18n={enTranslations}>\r\n          <Page>\r\n            <DatePicker\r\n              month={month}\r\n              year={year}\r\n              onChange={setSelectedDate}\r\n              onMonthChange={handleMonthChange}\r\n              selected={selectedDate}\r\n              disableDatesBefore={new Date(\"2022-10-31\")}\r\n              disableDatesAfter={new Date()}\r\n              disableSpecificDates={disabledDates}\r\n            />\r\n          </Page>\r\n        </AppProvider>\r\n      </div>\r\n\r\n      <div className={styles.WrapperSpam}>\r\n        <SpamChart date={selectedDate} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpamStats;\r\n","import { Text, Accordion } from \"@contentful/f36-components\";\r\n\r\nimport \"./HomeAccordion.css\";\r\n\r\nconst HomeAccordion = (props) => {\r\n  console.log(props.data);\r\n\r\n  let healthItems = props.data;\r\n\r\n  console.log(healthItems);\r\n\r\n  let style\r\n\r\n  // {\r\n  //   healthItems.map((item) => {\r\n  //     if (item[Object.keys(item)[0]].queuesHealth === 'unhealthy' || item[Object.keys(item)[0]].servicesHealth === 'unhealthy' || item[Object.keys(item)[0]].diskHealth === 'unhealthy') { bordercolor = \"Red\"; return bordercolor; }\r\n  //   }\r\n  //   )\r\n  // }\r\n\r\n  // if (item[Object.keys(item)[0]].queuesHealth === 'unhealthy' || item[Object.keys(item)[0]].servicesHealth === 'unhealthy' || item[Object.keys(item)[0]].diskHealth === 'unhealthy') { bordercolor = \"Red\"; return bordercolor; }\r\n  \r\n  // console.log(bordercolor);\r\n\r\n  return (\r\n    <Accordion>\r\n      {healthItems.map((item) => {\r\n\r\n        console.log(item[Object.keys(item)[0]])\r\n\r\n        if (\r\n          item[Object.keys(item)[0]].queuesHealth === \"unhealthy\" ||\r\n          item[Object.keys(item)[0]].servicesHealth === \"unhealthy\" ||\r\n          item[Object.keys(item)[0]].diskHealth === \"unhealthy\"\r\n        ) {\r\n          style = {\r\n            \"borderLeft\": \"10px solid IndianRed\"           \r\n          };                \r\n        }  else { style = {\"borderLeft\": \"10px solid YellowGreen\"}}\r\n\r\n        return (\r\n          <div style={style} key={Object.keys(item)[0]}>\r\n            <Accordion.Item title={Object.keys(item)[0]}>\r\n              <Text>\r\n                <div className=\"heatlhItemGrid\">\r\n                  <div className=\"healthItemPara\">Services : </div>\r\n                  <div className=\"healthItemParaStatus\">\r\n                    {item[Object.keys(item)[0]].servicesHealth}\r\n                  </div>\r\n                </div>\r\n                <div className=\"heatlhItemGrid\">\r\n                  <div className=\"healthItemPara\">Mail Queues : </div>\r\n                  <div className=\"healthItemParaStatus\">\r\n                    {item[Object.keys(item)[0]].queuesHealth}\r\n                  </div>\r\n                </div>\r\n                <div className=\"heatlhItemGrid\">\r\n                  <div className=\"healthItemPara\">Disk Space : </div>\r\n                  <div className=\"healthItemParaStatus\">\r\n                    {item[Object.keys(item)[0]].diskHealth}\r\n                  </div>\r\n                </div>\r\n              </Text>\r\n            </Accordion.Item>\r\n          </div>\r\n        );}\r\n      \r\n \r\n  \r\n       \r\n      )}\r\n    </Accordion>\r\n  );\r\n  \r\n}\r\n\r\nexport default HomeAccordion\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport styles from \"./Home.module.css\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { GridLoader } from \"react-spinners\";\r\nimport HomeAccordion from \"./HomeAccordion\";\r\n\r\nfunction Home() {\r\n  const [serverHealth, setServerHealth] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  let initialHealthObject\r\n\r\n  let serversArray\r\n\r\n  const readMailStatsDB = async function () {\r\n    setLoading(true);\r\n\r\n    const certDataJSONDisk = await axios.get(\r\n      `https://mailstats-api.onrender.com/api/v1/diskStats`\r\n    );\r\n\r\n    const DISK_STATS_SORTED_ASC = certDataJSONDisk.data.sort((objA, objB) => {\r\n      return objA.serverName.localeCompare(objB.serverName);\r\n    });\r\n\r\n    const DBObjectServers = DISK_STATS_SORTED_ASC.filter(\r\n      (el) => el.serverName !== \"NoData\"\r\n    );\r\n\r\n    console.log(DBObjectServers);\r\n\r\n    serversArray = new Array(0);\r\n\r\n    DBObjectServers.forEach((el) => {\r\n      serversArray.push(el.serverName);\r\n    });\r\n\r\n    initialHealthObject = new Array(0);\r\n\r\n    serversArray.forEach((el) => {\r\n      let newObj = {};\r\n\r\n      newObj[el] = {\r\n        diskHealth: \"healthy\",\r\n        servicesHealth: \"healthy\",\r\n        queuesHealth: \"healthy\",\r\n       \r\n      };\r\n\r\n      initialHealthObject.push(newObj);\r\n    });\r\n\r\n    DBObjectServers.forEach((el) => {\r\n      el.volumes.forEach((vol) => {\r\n        if (vol.freeSpaceGB / vol.capacityGB < 0.15) {\r\n          console.log(`${el.serverName} unheathy volumes`);\r\n\r\n          let objectToUpdate = initialHealthObject.find((item) =>\r\n            Object.keys(item).includes(el.serverName)\r\n          );\r\n\r\n          objectToUpdate[el.serverName][\"diskHealth\"] = \"unhealthy\";\r\n        }\r\n      });\r\n    });\r\n\r\n\r\n\r\n const certDataJSONServices = await axios.get(\r\n   `https://mailstats-api.onrender.com/api/v1/serviceStats`\r\n );\r\n\r\n const SERVICE_STATS_SORTED_ASC = certDataJSONServices.data.sort((objA, objB) => {\r\n   return objA.serverName.localeCompare(objB.serverName);\r\n });\r\n    \r\n   const DBObjectServices = SERVICE_STATS_SORTED_ASC.filter(\r\n     (el) => el.serverName !== \"NoData\"\r\n   ); \r\n    \r\n    console.log(DBObjectServices); \r\n\r\n    let servicesServerArray = []\r\n    \r\nDBObjectServices.forEach((el) => servicesServerArray.push(el.serverName));\r\n\r\n    console.log(servicesServerArray);\r\n    \r\n    serversArray.forEach((el) => {\r\n      if ((servicesServerArray).includes(el)) {\r\n      \r\n       let objectToUpdate = initialHealthObject.find((item) =>\r\n         Object.keys(item).includes(el)\r\n       );\r\n\r\n       objectToUpdate[el][\"servicesHealth\"] = \"unhealthy\"; \r\n\r\n\r\n     } })\r\n\r\n\r\n\r\n const certDataJSONQueues = await axios.get(\r\n   `https://mailstats-api.onrender.com/api/v1/queueStats`\r\n );\r\n\r\n const QUEUE_STATS_SORTED_ASC = certDataJSONQueues.data.sort(\r\n   (objA, objB) => {\r\n     return objA.serverName.localeCompare(objB.serverName);\r\n   }\r\n );\r\n\r\n const DBObjectQueues = QUEUE_STATS_SORTED_ASC.filter(\r\n   (el) => el.serverName !== \"NoData\"\r\n );\r\n\r\n    console.log(DBObjectQueues); \r\n    \r\n   let queuesServerArray = [];\r\n\r\n   DBObjectQueues.forEach((el) => queuesServerArray.push(el.serverName));\r\n\r\n   console.log(queuesServerArray);\r\n\r\n   serversArray.forEach((el) => {\r\n     if (queuesServerArray.includes(el)) {\r\n       let objectToUpdate = initialHealthObject.find((item) =>\r\n         Object.keys(item).includes(el)\r\n       );\r\n\r\n       objectToUpdate[el][\"queuesHealth\"] = \"unhealthy\";\r\n     }\r\n   });  \r\n\r\n\r\n    if (certDataJSONQueues.status === 200) {\r\n      console.log(initialHealthObject);\r\n      setServerHealth(initialHealthObject);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    readMailStatsDB();\r\n     \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      readMailStatsDB();\r\n      \r\n    }, 30000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  const loadSpinner = (\r\n    <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />\r\n  );\r\n\r\n  console.log(serverHealth);\r\n\r\n  return (\r\n    <div className={styles.home}>\r\n      <p>Mail Stats</p>\r\n      <div className={styles.spinnerSVC}>{loadSpinner}</div>\r\n\r\n      <div className={styles.WrapperAccordion}>\r\n        <HomeAccordion data={serverHealth} />\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu, IconButton } from \"@contentful/f36-components\";\r\nimport { MenuIcon } from \"@contentful/f36-icons\";\r\nimport \"./Menu.css\";\r\n\r\nfunction BurgerMenu() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  return (\r\n    <Menu isOpen={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Menu.Trigger>\r\n        <IconButton\r\n          variant=\"secondary\"\r\n          icon={<MenuIcon />}\r\n          aria-label=\"toggle menu\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n        />\r\n      </Menu.Trigger>\r\n      <Menu.List>\r\n        <div className=\"menuList\">\r\n          <Link to=\"/Home\" component={Menu.Item} as=\"a\">\r\n            Home\r\n          </Link>\r\n          <Menu.Divider />\r\n          <Link to=\"/queuestats\" component={Menu.Item} as=\"a\">\r\n            Mail Queue Statistics\r\n          </Link>\r\n          <Menu.Divider />\r\n          <Link to=\"/servicestats\" component={Menu.Item} as=\"a\">\r\n            Mail Service Statistics\r\n          </Link>\r\n          <Menu.Divider />\r\n          <Link to=\"/diskstats\" component={Menu.Item} as=\"a\">\r\n            Server Disk Statistics\r\n          </Link>\r\n          <Menu.Divider />\r\n          <Link to=\"/spamstats\" component={Menu.Item} as=\"a\">\r\n            Top Senders\r\n          </Link>\r\n        </div>\r\n      </Menu.List>\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default BurgerMenu;\r\n","import QueueStats from \"./components/MailStats/QueueStats\";\nimport ServiceStats from \"./components/MailStats/ServiceStats\";\nimport DiskStats from \"./components/MailStats/DiskStats\";\nimport SpamStats from \"./components/MailStats/SpamStats\";\nimport Home from \"./components/MailStats/Home\";\nimport React from \"react\";\nimport {\n  // BrowserRouter as Router,\n  Routes,\n  Route,\n  HashRouter,\n} from \"react-router-dom\";\nimport BurgerMenu from \"./components/MailStats/Menu\";\n\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"AppFrame\">\n      <HashRouter>\n        <div className=\"burger\">{<BurgerMenu />}</div>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n          <Route path=\"/home\" element={<Home />} />\n          <Route path=\"/queuestats\" element={<QueueStats />} />\n          <Route path=\"/servicestats\" element={<ServiceStats />} />\n          <Route path=\"/diskstats\" element={<DiskStats />} />\n          <Route path=\"/spamstats\" element={<SpamStats />} />\n        </Routes>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"QueueStats\":\"QueueStats_QueueStats__3HxaU\",\"pagelabel\":\"QueueStats_pagelabel__o05Yc\",\"spinnerQueue\":\"QueueStats_spinnerQueue__2J6A0\",\"listItemWrapperInnerQueue\":\"QueueStats_listItemWrapperInnerQueue__1hpZN\",\"listItemWrapperQueue\":\"QueueStats_listItemWrapperQueue__2r6gW\",\"serverlabelQueue\":\"QueueStats_serverlabelQueue__28LJ2\",\"listItemQueue1\":\"QueueStats_listItemQueue1__2WsVA\",\"listItemQueue2\":\"QueueStats_listItemQueue2__3NgDa\",\"queueLabel\":\"QueueStats_queueLabel__2zniX\",\"messageCount\":\"QueueStats_messageCount__1jm5i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ServiceStats\":\"ServiceStats_ServiceStats__1kFmg\",\"pagelabelsvc\":\"ServiceStats_pagelabelsvc__1Riwq\",\"spinnerSVC\":\"ServiceStats_spinnerSVC__3-a_t\",\"listItemWrapperInner\":\"ServiceStats_listItemWrapperInner__41eAf\",\"listItemWrapperSVC\":\"ServiceStats_listItemWrapperSVC__t2VWz\",\"serverlabelsvc\":\"ServiceStats_serverlabelsvc__lE6Iu\",\"servicelabel\":\"ServiceStats_servicelabel__2IAB9\",\"listItemSVC\":\"ServiceStats_listItemSVC__2yyI0\",\"serviceDetails\":\"ServiceStats_serviceDetails__3hkU4\"};"],"sourceRoot":""}