{"version":3,"sources":["components/MailStats/SpamChart.js","components/MailStats/QueueStats.js","components/MailStats/ServiceStats.js","components/MailStats/Volumes.js","components/MailStats/DiskStats.js","components/MailStats/SpamStats.js","components/MailStats/HomeAccordion.js","components/MailStats/Home.js","components/MailStats/Menu.js","App.js","index.js"],"names":["chartArrayTopSenders","QueueStats","useState","queueStats","setQueueStats","loading","setLoading","readQueueStatsDB","console","log","axios","get","certDataJSON","data","STATS_SORTED_ASC","sort","objA","objB","Number","Date","documentID","status","useEffect","timer","setInterval","clearInterval","loadSpinner","GridLoader","color","size","itemsToRender","filter","el","serverName","className","map","item","queueName","messageCount","ServiceStats","serviceStats","setServiceStats","readServiceStatsDB","serviceName","Volumes","props","diskData","volumes","vol","volumeCapacity","volumeFreeSpace","capacityGB","freeSpaceGB","Math","floor","toString","concat","bgColor","percentFree","perCentFreeString","style","backgroundColor","width","label","DiskStats","diskStats","setDiskStats","readDiskStatsDB","localeCompare","outputExcludeArray","SpamChart","topSenders","setTopSenders","displayChart","setDisplayChart","year","date","start","getFullYear","month","getMonth","getDate","String","padStart","selectedDate","readSpamStatsDB","spamDataJSON","chartArray","CHART_ARRAY_SORTED_ASC","chartArrayTop25","_","index","includes","sender","length","outputToChart","BarChart","layout","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","type","dataKey","domain","YAxis","Tooltip","Legend","Bar","fill","SpamStats","setDate","end","setSelectedDate","datesWithSenderData","setDatesWithSenderData","disabledDates","setDisabledDates","distinctDates","distinctDatesJSON","disabledDatesArray","fullMonth","monthYearString","allDatesThisMonth","document","getElementsByClassName","Array","from","forEach","fullDate","innerText","dateMonthYearString","classList","toggle","dateMonthYearStringWithOffset","push","formatDatesWithData","handleMonthChange","useCallback","AppProvider","i18n","enTranslations","Page","DatePicker","onChange","onMonthChange","selected","disableDatesBefore","disableDatesAfter","disableSpecificDates","HomeAccordion","healthItems","Object","keys","queuesHealth","servicesHealth","diskHealth","Item","title","Home","initialHealthObject","serversArray","serverHealth","setServerHealth","readMailStatsDB","certDataJSONDisk","DISK_STATS_SORTED_ASC","DBObjectServers","newObj","find","certDataJSONServices","SERVICE_STATS_SORTED_ASC","DBObjectServices","servicesServerArray","certDataJSONQueues","QUEUE_STATS_SORTED_ASC","DBObjectQueues","queuesServerArray","BurgerMenu","isOpen","setIsOpen","onClose","Trigger","variant","icon","onClick","List","to","component","Menu","as","Divider","App","exact","path","element","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.d924621f.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport axios from \"axios\";\r\nimport \"./SpamStats.css\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { GridLoader } from \"react-spinners\";\r\n\r\nconst outputExcludeArray = [\r\n  \"MicrosoftExchange329e71ec88ae4615bbc36ab6ce41109e@mahidol.ac.th\"\r\n];\r\n\r\nlet chartArrayTopSenders\r\n\r\nconst SpamChart = (props) => {\r\n    const [topSenders, setTopSenders] = useState([]);\r\n    const [displayChart, setDisplayChart] = useState(false);\r\nconst [loading, setLoading] = useState(false);\r\n//   console.log(props.date);\r\n\r\n  const year = props.date.start.getFullYear();\r\n  let month = props.date.start.getMonth() + 1;\r\n  let date = props.date.start.getDate();\r\n\r\n  month = String(month).padStart(2, 0);\r\n\r\n  date = String(date).padStart(2, 0);\r\n\r\n  const selectedDate = `${year}-${month}-${date}`;\r\n\r\n//   console.log(selectedDate);\r\n\r\n  const readSpamStatsDB = async function (selectedDate) {\r\n      let spamDataJSON;\r\n      setDisplayChart(false);\r\n      setLoading(true);\r\n\r\n    // console.log(selectedDate);\r\n\r\n    if (selectedDate !== \"1999-0-1\") {\r\n      spamDataJSON = await axios.get(\r\n        `https://mailstats-api.onrender.com/api/v1/spamStats/?date=${selectedDate}`\r\n      );\r\n\r\n      if (spamDataJSON.status === 200) {\r\n        // console.log(\"Query Complete\");\r\nsetLoading(false);\r\n        // console.log(spamDataJSON.data);\r\n      }\r\n    }\r\n\r\n    return spamDataJSON.data;\r\n  };\r\n\r\n    async function outputToChart(selectedDate) {\r\n      \r\n        // console.log('START')\r\n    const chartArray = await readSpamStatsDB(selectedDate);\r\n\r\n    // console.log(chartArray);\r\n\r\n    const CHART_ARRAY_SORTED_ASC = chartArray.sort(\r\n      (objA, objB) =>\r\n        Number(objB.messageCount) -\r\n        Number(objA.messageCount)\r\n    );\r\n\r\n    let chartArrayTop25 = CHART_ARRAY_SORTED_ASC.filter(\r\n      (_, index) => index < 25\r\n    );\r\n    chartArrayTopSenders = chartArrayTop25.filter((el) => {\r\n      return !outputExcludeArray.includes(el.sender);\r\n    });\r\n\r\n        \r\n    //     console.log('CHART ARRAY SORTED and FILTERED')\r\n    // console.table(chartArrayTopSenders);\r\n\r\n        setTopSenders(chartArrayTopSenders);\r\n        if (chartArrayTopSenders.length) { setDisplayChart(true) };\r\n  }\r\n\r\n  useEffect(() => {\r\n    outputToChart(selectedDate);\r\n  }, [selectedDate]);\r\n\r\nconst loadSpinner = <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />;\r\n    \r\n    if (displayChart | loading) {\r\n        return (\r\n          <div>\r\n            <div className=\"spinnerSVC\">{loadSpinner}</div>\r\n            <BarChart\r\n              layout=\"vertical\"\r\n              width={1000}\r\n              height={800}\r\n              data={topSenders}\r\n              margin={{\r\n                top: 60,\r\n                right: 180,\r\n                left: 180,\r\n                bottom: 5,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis type=\"number\" dataKey=\"messageCount\" domain={[0, 25000]} />\r\n              <YAxis type=\"category\" dataKey=\"sender\" />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"messageCount\" fill=\"#3397a5\" />\r\n            </BarChart>\r\n          </div>\r\n        );}\r\n\r\n \r\n};\r\n\r\nexport default SpamChart;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport \"./QueueStats.css\";\nimport {GridLoader} from \"react-spinners\"\n\nconst QueueStats = () => {\n  const [queueStats, setQueueStats] = useState([]);\n  const [loading, setLoading] = useState(false)\n\n  const readQueueStatsDB = async function () {\n    setLoading(true)\n\n    console.log('trigger Axios')\n\n    const certDataJSON = await axios.get(\n      `https://mailstats-api.onrender.com/api/v1/queueStats`\n    );\n\n    console.log(certDataJSON.data);\n\n    const STATS_SORTED_ASC = certDataJSON.data.sort(\n      (objA, objB) =>\n        Number(new Date(objA.documentID)) - Number(new Date(objB.documentID))\n    );\n\n    // console.log(certDataJSON.status);\n\n    if (certDataJSON.status === 200) {\n      setQueueStats(STATS_SORTED_ASC);\n      setLoading(false)\n    }\n  };\n useEffect(() => {\n   readQueueStatsDB()\n }, []);\n    // readQueueStatsDB();\n\n  useEffect(() => {\n    const timer = setInterval(() => readQueueStatsDB(), 30000);\n\n   \n    return () => clearInterval(timer);\n  }, []);\n\n\n  const loadSpinner = <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />;\n \n\n  \n\n  const itemsToRender = queueStats.filter((el) => el.serverName !== \"NoData\");\n\n  console.log(itemsToRender)\n\n  return (\n    <div className=\"QueueStats\">\n      <div className=\"pagelabel\">\n        <p>SMTP Queue Stats</p>\n      </div>\n      <div className=\"spinnerQueue\">{loadSpinner}</div>\n\n      {itemsToRender.map((item) => (\n        <div className=\"listItemWrapperQueue\">\n          <div className=\"listItemWrapperInnerQueue\">\n            <ul>\n              <li className=\"listItemQueue1\">\n                <div className=\"serverlabelQueue\">\n                  <p>{item.serverName}</p>\n                </div>\n              </li>\n              <li className=\"listItemQueue2\">\n                <div className=\"queueLabel\">\n                  <p className=\"label\">Queue:</p> {item.queueName}\n                </div>\n                <div className=\"messageCount\">{item.messageCount}</div>\n              </li>\n            </ul>\n          </div>\n\n          {/* <div className=\"messageCount\">{item.messageCount}</div> */}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default QueueStats;\n","\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport \"./ServiceStats.css\";\nimport { GridLoader } from \"react-spinners\";\n\nconst ServiceStats = () => {\n  const [serviceStats, setServiceStats] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const readServiceStatsDB = async function () {\n\n    setLoading(true);\n\n    console.log('trigger Axios')\n\n    const certDataJSON = await axios.get(\n      `https://mailstats-api.onrender.com/api/v1/serviceStats`\n    );\n\n    console.log(certDataJSON.data);\n\n    const STATS_SORTED_ASC = certDataJSON.data.sort(\n      (objA, objB) =>\n        Number(new Date(objA.documentID)) - Number(new Date(objB.documentID))\n    );\n\n    // console.log(certDataJSON.status);\n\n    if (certDataJSON.status === 200) {\n      setServiceStats(STATS_SORTED_ASC);\n       setLoading(false);\n    }\n  };\n useEffect(() => {\n   readServiceStatsDB()\n }, []);\n    // readQueueStatsDB();\n\n  useEffect(() => {\n    const timer = setInterval(() => readServiceStatsDB(), 30000);\n\n   \n    return () => clearInterval(timer);\n  }, []);\n\n  const loadSpinner = (\n    <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />\n  );\n\n  const itemsToRender = serviceStats.filter((el) => el.serverName !== \"NoData\");\n\n  console.log(itemsToRender)\n\n  return (\n    <div className=\"ServiceStats\">\n      <div className=\"pagelabelsvc\">\n        <p>SMTP Service Stats</p>\n      </div>\n      <div className=\"spinnerSVC\">{loadSpinner}</div>\n      {itemsToRender.map((item) => (\n        <div className=\"listItemWrapperSVC\">\n          <div className=\"listItemWrapperInner\">\n            <ul>\n              <li className=\"listItemSVC\">\n                <div className=\"serverlabelsvc\">\n                  <p>{item.serverName}</p>\n                </div>\n              </li>\n              <li className=\"listItemSVC\">\n                <div className='serviceDetails'>\n                  <p className=\"servicelabel\">Service:</p>\n                  <p>{item.serviceName}</p>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ServiceStats;\n","import \"./Volumes.css\";\r\n\r\nconst Volumes = (props) => {\r\n\r\n  console.log(props.data)\r\n\r\n  const diskData = props.data;\r\n  return (<div>\r\n    {diskData.map((el) => {\r\n      return (\r\n        \r\n        \r\n            <div>\r\n              <div className=\"serverlabelDisk\">\r\n                <p>{el.serverName}</p>\r\n              </div>\r\n              <div className=\"displayFrame\">\r\n                <div className=\"header\">Drive</div>\r\n                <div className=\"header\">Total Space</div>\r\n                <div className=\"header\">Free Space</div>\r\n                <div className=\"headerBar\"></div>\r\n                <div className=\"header\">% Free</div>\r\n              </div>\r\n\r\n          {el.volumes.map((vol) => {\r\n\r\n            console.log(vol.capacityGB, vol.freeSpaceGB);\r\n\r\n           \r\n           let volumeCapacity\r\n                \r\n                vol.capacityGB >= 1024\r\n                  ? (volumeCapacity = Math.floor(vol.capacityGB / 1024)\r\n                      .toString()\r\n                      .concat(\" TB\"))\r\n                  : (volumeCapacity = Math.floor(vol.capacityGB)\r\n                      .toString()\r\n                      .concat(\" GB\"));\r\n          \r\n\r\n            let volumeFreeSpace\r\n\r\n                vol.freeSpaceGB >= 1024\r\n             ? (volumeFreeSpace = (Math.floor((vol.freeSpaceGB/1024)))\r\n                 .toString()\r\n                 .concat(\" TB\"))\r\n             : (volumeFreeSpace = Math.floor(vol.freeSpaceGB)\r\n                 .toString()\r\n                .concat(\" GB\"));\r\n            \r\n            const percentFree = Math.floor((vol.freeSpaceGB / vol.capacityGB) * 100);\r\n\r\n            const perCentFreeString = (percentFree).toString().concat(\"%\")\r\n\r\n            let bgColor\r\n\r\n            (percentFree < 15) ? (percentFree < 8 ? bgColor = \"IndianRed\" : bgColor = \"Gold\") : bgColor = \"YellowGreen\"\r\n\r\n            console.log(perCentFreeString)\r\n\r\n            const style = {\r\n              backgroundColor: bgColor ,\r\n              width: perCentFreeString,\r\n            };\r\n              \r\n              return (\r\n                <div className=\"volumesMainGrid\">\r\n                  <div className=\"driveLabelDisk\">{vol.label}</div>\r\n                  <div className=\"totalSizeDisk\">{volumeCapacity}</div>\r\n                  <div className=\"freeSpaceDisk\">{volumeFreeSpace}</div>\r\n                  <div className=\"freeSpaceChartBarDisk\">\r\n                    <div\r\n                      className=\"diskBar\"\r\n                      style={\r\n                        style\r\n                      }\r\n                    ></div>\r\n                  </div>\r\n                  <div className=\"freeSpacePerCentDisk\">{percentFree}%</div>\r\n                </div>\r\n              );\r\n                       } )}\r\n            </div>\r\n        // );\r\n      \r\n      \r\n      \r\n      \r\n      )\r\n    })}\r\n\r\n     </div>)\r\n    }\r\n  \r\n\r\n          \r\n     \r\n//     });\r\n \r\n// };\r\n\r\nexport default Volumes\r\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport \"./DiskStats.css\";\nimport { GridLoader } from \"react-spinners\"\nimport Volumes from './Volumes'\n\nconst DiskStats = () => {\n  const [diskStats, setDiskStats] = useState([]);\n  const [loading, setLoading] = useState(false)\n\n  const readDiskStatsDB = async function () {\n    setLoading(true)\n\n    console.log('trigger Axios')\n\n    const certDataJSON = await axios.get(\n      `https://mailstats-api.onrender.com/api/v1/diskStats`\n    );\n\n    // console.log(certDataJSON.data);\n\n    const STATS_SORTED_ASC = certDataJSON.data.sort(\n      (objA, objB) => {return objA.serverName.localeCompare(objB.serverName); }\n        \n    );\n\n    // console.log(certDataJSON.status);\n\n    if (certDataJSON.status === 200) {\n      setDiskStats(STATS_SORTED_ASC);\n      setLoading(false)\n    }\n  };\n  useEffect(() => {\n    readDiskStatsDB()\n  }, []);\n  \n\n  useEffect(() => {\n    const timer = setInterval(() => readDiskStatsDB(), 300000);\n\n   \n    return () => clearInterval(timer);\n  }, []);\n\n\n  const loadSpinner = <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />;\n \n\n  \n\n  const itemsToRender = diskStats.filter((el) => el.serverName !== \"NoData\");\n\n  console.log(itemsToRender)\n\n  return (\n    <div className=\"DiskStats\">\n      <div className=\"pagelabelDisk\">\n        <p>Exchange Disk Stats</p>\n      </div>\n      <div className=\"spinnerSVC\">{loadSpinner}</div>\n\n      <div className=\"WrapperDisk\">\n        <Volumes data={itemsToRender} />\n      </div>\n    </div>\n  );\n};\n\nexport default DiskStats;\n","/* eslint-disable array-callback-return */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useCallback, useEffect } from \"react\";\r\nimport \"./SpamStats.css\";\r\nimport * as React from \"react\";\r\nimport enTranslations from \"@shopify/polaris/locales/en.json\";\r\nimport { AppProvider, Page, DatePicker } from \"@shopify/polaris\";\r\nimport SpamChart from \"./SpamChart\";\r\nimport axios from \"axios\";\r\n\r\n\r\n// const disabledDates = [];\r\n\r\n// disabledDates.push(new Date(\"2022-11-09T00:00:00\"));\r\n\r\nconst SpamStats = () => {\r\n    const [{ month, year }, setDate] = useState({ month: 10, year: 2022 });\r\n    \r\n  const [selectedDate, setSelectedDate] = useState({\r\n    start: new Date(\"1999-1-1\"),\r\n    end: new Date(\"1999-1-1\"),\r\n  });\r\n    const [datesWithSenderData, setDatesWithSenderData] = useState([])\r\n    const [disabledDates, setDisabledDates] = useState([])\r\n   \r\n    const distinctDates = async function () {\r\n      let distinctDatesJSON;\r\n     \r\n      \r\n        distinctDatesJSON = await axios.get(\r\n          `https://mailstats-api.onrender.com/api/v1/spamStatsDates`\r\n        );\r\n\r\n        if (distinctDatesJSON.status === 200) {\r\n        //   console.log(\"Distinct Dates Retrieved\");\r\n\r\n        //   console.log(distinctDatesJSON.data);\r\n        }\r\n      \r\n\r\n        setDatesWithSenderData(distinctDatesJSON.data)\r\n        \r\n    };\r\n\r\n    \r\n    useEffect(() => { distinctDates() }, [])\r\n\r\n\r\n    const disabledDatesArray = [];\r\n\r\n    \r\n    \r\n    \r\n    const formatDatesWithData = function (month, year) {\r\n\r\n        // console.log(month, year)\r\n\r\n        const fullMonth = String(month+1).padStart(2, 0);\r\n\r\n        const monthYearString = `${year}-${fullMonth}`\r\n\r\n        const allDatesThisMonth = document.getElementsByClassName('Polaris-DatePicker__Day')\r\n\r\n        const allDatesThisMonthArray = Array.from(allDatesThisMonth)\r\n\r\n        // console.log(monthYearString)\r\n\r\n        allDatesThisMonthArray.forEach((el) => {\r\n\r\n            const fullDate = String(el.innerText).padStart(2, 0);\r\n            \r\n            const dateMonthYearString = `${monthYearString}-${fullDate}`;\r\n\r\n            // console.log(dateMonthYearString)\r\n\r\n            if ((datesWithSenderData).includes(dateMonthYearString)) {\r\n\r\n                // console.log(el.classList)\r\n\r\n                el.classList.toggle(\"Polaris-DatePicker__Day__withData\");\r\n\r\n                // console.log(dateMonthYearString);\r\n                \r\n                //  console.log(el.classList);\r\n            }\r\n\r\n\r\n            if (!datesWithSenderData.includes(dateMonthYearString)) {\r\n              \r\n\r\n            \r\n                \r\n                let dateMonthYearStringWithOffset = dateMonthYearString.concat(\"T00:00:00\")\r\n\r\n           \r\n\r\n              disabledDatesArray.push(new Date(dateMonthYearStringWithOffset));\r\n            }\r\n\r\n\r\n\r\n        })\r\n\r\n        // console.log(disabledDatesArray)\r\n       \r\n        setDisabledDates(disabledDatesArray);\r\n    \r\n    }\r\n    \r\n    useEffect(() => {\r\n      formatDatesWithData(month, year);\r\n    }, [month, year, datesWithSenderData]);\r\n    \r\n\r\n  const handleMonthChange = useCallback(\r\n    (month, year) => setDate({ month, year }),\r\n    []\r\n    );\r\n    \r\n    // console.log(datesWithSenderData);\r\n\r\n  return (\r\n    <div className=\"SpamStats\">\r\n      <div className=\"pagelabelSpam\">\r\n        <p>Top Senders</p>\r\n      </div>\r\n      <div className=\"datePicker\">\r\n        <AppProvider i18n={enTranslations}>\r\n          <Page>\r\n            <DatePicker\r\n              month={month}\r\n              year={year}\r\n              onChange={setSelectedDate}\r\n              onMonthChange={handleMonthChange}\r\n              selected={selectedDate}\r\n              disableDatesBefore={new Date(\"2022-10-31\")}\r\n              disableDatesAfter={new Date()}\r\n              disableSpecificDates={disabledDates}\r\n            />\r\n          </Page>\r\n        </AppProvider>\r\n      </div>\r\n\r\n      <div className=\"WrapperSpam\">\r\n        <SpamChart date={selectedDate} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpamStats;\r\n","import { Text, Accordion } from \"@contentful/f36-components\";\r\n\r\nimport \"./HomeAccordion.css\";\r\n\r\nconst HomeAccordion = (props) => {\r\n  console.log(props.data);\r\n\r\n  let healthItems = props.data;\r\n\r\n  console.log(healthItems);\r\n\r\n  let style\r\n\r\n  // {\r\n  //   healthItems.map((item) => {\r\n  //     if (item[Object.keys(item)[0]].queuesHealth === 'unhealthy' || item[Object.keys(item)[0]].servicesHealth === 'unhealthy' || item[Object.keys(item)[0]].diskHealth === 'unhealthy') { bordercolor = \"Red\"; return bordercolor; }\r\n  //   }\r\n  //   )\r\n  // }\r\n\r\n  // if (item[Object.keys(item)[0]].queuesHealth === 'unhealthy' || item[Object.keys(item)[0]].servicesHealth === 'unhealthy' || item[Object.keys(item)[0]].diskHealth === 'unhealthy') { bordercolor = \"Red\"; return bordercolor; }\r\n  \r\n  // console.log(bordercolor);\r\n\r\n  return (\r\n    <Accordion>\r\n      {healthItems.map((item) => {\r\n\r\n        console.log(item[Object.keys(item)[0]])\r\n\r\n        if (\r\n          item[Object.keys(item)[0]].queuesHealth === \"unhealthy\" ||\r\n          item[Object.keys(item)[0]].servicesHealth === \"unhealthy\" ||\r\n          item[Object.keys(item)[0]].diskHealth === \"unhealthy\"\r\n        ) {\r\n          style = {\r\n            \"borderLeft\": \"10px solid IndianRed\"           \r\n          };                \r\n        }  else { style = {\"borderLeft\": \"10px solid YellowGreen\"}}\r\n\r\n        return (\r\n          <div style={style} key={Object.keys(item)[0]}>\r\n            <Accordion.Item title={Object.keys(item)[0]}>\r\n              <Text>\r\n                <div className=\"heatlhItemGrid\">\r\n                  <div className=\"healthItemPara\">Services : </div>\r\n                  <div className=\"healthItemParaStatus\">\r\n                    {item[Object.keys(item)[0]].servicesHealth}\r\n                  </div>\r\n                </div>\r\n                <div className=\"heatlhItemGrid\">\r\n                  <div className=\"healthItemPara\">Mail Queues : </div>\r\n                  <div className=\"healthItemParaStatus\">\r\n                    {item[Object.keys(item)[0]].queuesHealth}\r\n                  </div>\r\n                </div>\r\n                <div className=\"heatlhItemGrid\">\r\n                  <div className=\"healthItemPara\">Disk Space : </div>\r\n                  <div className=\"healthItemParaStatus\">\r\n                    {item[Object.keys(item)[0]].diskHealth}\r\n                  </div>\r\n                </div>\r\n              </Text>\r\n            </Accordion.Item>\r\n          </div>\r\n        );}\r\n      \r\n \r\n  \r\n       \r\n      )}\r\n    </Accordion>\r\n  );\r\n  \r\n}\r\n\r\nexport default HomeAccordion\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport \"./Home.css\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { GridLoader } from \"react-spinners\";\r\nimport HomeAccordion from \"./HomeAccordion\";\r\n\r\nfunction Home() {\r\n  const [serverHealth, setServerHealth] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  let initialHealthObject\r\n\r\n  let serversArray\r\n\r\n  const readMailStatsDB = async function () {\r\n    setLoading(true);\r\n\r\n    const certDataJSONDisk = await axios.get(\r\n      `https://mailstats-api.onrender.com/api/v1/diskStats`\r\n    );\r\n\r\n    const DISK_STATS_SORTED_ASC = certDataJSONDisk.data.sort((objA, objB) => {\r\n      return objA.serverName.localeCompare(objB.serverName);\r\n    });\r\n\r\n    const DBObjectServers = DISK_STATS_SORTED_ASC.filter(\r\n      (el) => el.serverName !== \"NoData\"\r\n    );\r\n\r\n    console.log(DBObjectServers);\r\n\r\n    serversArray = new Array(0);\r\n\r\n    DBObjectServers.forEach((el) => {\r\n      serversArray.push(el.serverName);\r\n    });\r\n\r\n    initialHealthObject = new Array(0);\r\n\r\n    serversArray.forEach((el) => {\r\n      let newObj = {};\r\n\r\n      newObj[el] = {\r\n        diskHealth: \"healthy\",\r\n        servicesHealth: \"healthy\",\r\n        queuesHealth: \"healthy\",\r\n       \r\n      };\r\n\r\n      initialHealthObject.push(newObj);\r\n    });\r\n\r\n    DBObjectServers.forEach((el) => {\r\n      el.volumes.forEach((vol) => {\r\n        if (vol.freeSpaceGB / vol.capacityGB < 0.15) {\r\n          console.log(`${el.serverName} unheathy volumes`);\r\n\r\n          let objectToUpdate = initialHealthObject.find((item) =>\r\n            Object.keys(item).includes(el.serverName)\r\n          );\r\n\r\n          objectToUpdate[el.serverName][\"diskHealth\"] = \"unhealthy\";\r\n        }\r\n      });\r\n    });\r\n\r\n\r\n\r\n const certDataJSONServices = await axios.get(\r\n   `https://mailstats-api.onrender.com/api/v1/serviceStats`\r\n );\r\n\r\n const SERVICE_STATS_SORTED_ASC = certDataJSONServices.data.sort((objA, objB) => {\r\n   return objA.serverName.localeCompare(objB.serverName);\r\n });\r\n    \r\n   const DBObjectServices = SERVICE_STATS_SORTED_ASC.filter(\r\n     (el) => el.serverName !== \"NoData\"\r\n   ); \r\n    \r\n    console.log(DBObjectServices); \r\n\r\n    let servicesServerArray = []\r\n    \r\nDBObjectServices.forEach((el) => servicesServerArray.push(el.serverName));\r\n\r\n    console.log(servicesServerArray);\r\n    \r\n    serversArray.forEach((el) => {\r\n      if ((servicesServerArray).includes(el)) {\r\n      \r\n       let objectToUpdate = initialHealthObject.find((item) =>\r\n         Object.keys(item).includes(el)\r\n       );\r\n\r\n       objectToUpdate[el][\"servicesHealth\"] = \"unhealthy\"; \r\n\r\n\r\n     } })\r\n\r\n\r\n\r\n const certDataJSONQueues = await axios.get(\r\n   `https://mailstats-api.onrender.com/api/v1/queueStats`\r\n );\r\n\r\n const QUEUE_STATS_SORTED_ASC = certDataJSONQueues.data.sort(\r\n   (objA, objB) => {\r\n     return objA.serverName.localeCompare(objB.serverName);\r\n   }\r\n );\r\n\r\n const DBObjectQueues = QUEUE_STATS_SORTED_ASC.filter(\r\n   (el) => el.serverName !== \"NoData\"\r\n );\r\n\r\n    console.log(DBObjectQueues); \r\n    \r\n   let queuesServerArray = [];\r\n\r\n   DBObjectQueues.forEach((el) => queuesServerArray.push(el.serverName));\r\n\r\n   console.log(queuesServerArray);\r\n\r\n   serversArray.forEach((el) => {\r\n     if (queuesServerArray.includes(el)) {\r\n       let objectToUpdate = initialHealthObject.find((item) =>\r\n         Object.keys(item).includes(el)\r\n       );\r\n\r\n       objectToUpdate[el][\"queuesHealth\"] = \"unhealthy\";\r\n     }\r\n   });  \r\n\r\n\r\n    if (certDataJSONQueues.status === 200) {\r\n      console.log(initialHealthObject);\r\n      setServerHealth(initialHealthObject);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    readMailStatsDB();\r\n     \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      readMailStatsDB();\r\n      \r\n    }, 30000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  const loadSpinner = (\r\n    <GridLoader color=\"#4f5e7d\" loading={loading} size={33} />\r\n  );\r\n\r\n  console.log(serverHealth);\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <p>Mail Stats</p>\r\n      <div className=\"spinnerSVC\">{loadSpinner}</div>\r\n\r\n      <div className=\"WrapperAccordion\">\r\n        <HomeAccordion data={serverHealth} />\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Menu, IconButton } from \"@contentful/f36-components\";\r\nimport { MenuIcon } from \"@contentful/f36-icons\";\r\nimport \"./Menu.css\";\r\n\r\nfunction BurgerMenu() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  return (\r\n    <Menu isOpen={isOpen} onClose={() => setIsOpen(false)}>\r\n      <Menu.Trigger>\r\n        <IconButton\r\n          variant=\"secondary\"\r\n          icon={<MenuIcon />}\r\n          aria-label=\"toggle menu\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n        />\r\n      </Menu.Trigger>\r\n      <Menu.List>\r\n        <div className=\"menuList\">\r\n          <Link to=\"/Home\" component={Menu.Item} as=\"a\">\r\n            Home\r\n          </Link>\r\n          <Menu.Divider />\r\n          <Link to=\"/queuestats\" component={Menu.Item} as=\"a\">\r\n            Mail Queue Statistics\r\n          </Link>\r\n          <Menu.Divider />\r\n          <Link to=\"/servicestats\" component={Menu.Item} as=\"a\">\r\n            Mail Service Statistics\r\n          </Link>\r\n          <Menu.Divider />\r\n          <Link to=\"/diskstats\" component={Menu.Item} as=\"a\">\r\n            Server Disk Statistics\r\n          </Link>\r\n          <Menu.Divider />\r\n          <Link to=\"/spamstats\" component={Menu.Item} as=\"a\">\r\n            Top Senders\r\n          </Link>\r\n        </div>\r\n      </Menu.List>\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default BurgerMenu;\r\n","import QueueStats from \"./components/MailStats/QueueStats\";\nimport ServiceStats from \"./components/MailStats/ServiceStats\";\nimport DiskStats from \"./components/MailStats/DiskStats\";\nimport SpamStats from \"./components/MailStats/SpamStats\";\nimport Home from \"./components/MailStats/Home\";\nimport React from \"react\";\nimport {\n  // BrowserRouter as Router,\n  Routes,\n  Route,\n  HashRouter,\n} from \"react-router-dom\";\nimport BurgerMenu from \"./components/MailStats/Menu\";\n\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"AppFrame\">\n      <HashRouter>\n        <div className=\"burger\">{<BurgerMenu />}</div>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n          <Route path=\"/home\" element={<Home />} />\n          <Route path=\"/queuestats\" element={<QueueStats />} />\n          <Route path=\"/servicestats\" element={<ServiceStats />} />\n          <Route path=\"/diskstats\" element={<DiskStats />} />\n          <Route path=\"/spamstats\" element={<SpamStats />} />\n        </Routes>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}